name: CI/CD for nicodb

on:
  push:
    branches:
      - main
  schedule:
    - cron: '30 17 * * *' # UTC 17:30 -> JST 26:30

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4

      - name: Python をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 必要なパッケージをインストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: リントを実行
        run: tox

  unit_test:
    runs-on: ubuntu-latest

    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4

      - name: Python をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 必要なパッケージをインストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 環境変数を設定
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DJANGO_DEBUG }}" >> $GITHUB_ENV
          echo "TESTING=True" >> $GITHUB_ENV
          echo "UNKNOWN_STREAMING_TITLE=${{ secrets.UNKNOWN_STREAMING_TITLE }}" >> $GITHUB_ENV
          echo "UNKNOWN_STREAMER_ID=${{ secrets.UNKNOWN_STREAMER_ID }}" >> $GITHUB_ENV
          echo "UNKNOWN_STREAMER_NAME=${{ secrets.UNKNOWN_STREAMER_NAME }}" >> $GITHUB_ENV
          echo "UNKNOWN_CHANNEL_ID=${{ secrets.UNKNOWN_CHANNEL_ID }}" >> $GITHUB_ENV
          echo "UNKNOWN_CHANNEL_NAME=${{ secrets.UNKNOWN_CHANNEL_NAME }}" >> $GITHUB_ENV
          echo "UNKNOWN_COMPANY_NAME=${{ secrets.UNKNOWN_COMPANY_NAME }}" >> $GITHUB_ENV

      - name: 単体テストを実行
        run: pytest streamings/tests/unit --cov-fail-under=80

  integration_test:
    runs-on: ubuntu-latest
    needs: [lint, unit_test]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4

      - name: Python をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 必要なパッケージをインストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 環境変数を設定
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DJANGO_DEBUG }}" >> $GITHUB_ENV
          echo "STREAMING_BASE_URL"=${{ secrets.STREAMING_BASE_URL }} >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
          echo "POSTGRES_USER=test_user" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=test_password" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
          echo "UNKNOWN_CHANNEL_ID=${{ secrets.UNKNOWN_CHANNEL_ID }}" >> $GITHUB_ENV
          echo "UNKNOWN_CHANNEL_NAME=${{ secrets.UNKNOWN_CHANNEL_NAME }}" >> $GITHUB_ENV
          echo "UNKNOWN_COMPANY_NAME=${{ secrets.UNKNOWN_COMPANY_NAME }}" >> $GITHUB_ENV


      - name: PostgreSQL の起動を待つ
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 && echo "PostgreSQL is up" && exit 0
            echo "Waiting for PostgreSQL..."
            sleep 3
          done
          echo "PostgreSQL did not start in time" && exit 1

      - name: マイグレーションを実行
        run: |
          python manage.py migrate

      - name: 結合テストを実行
        run: pytest streamings/tests/integration

  deploy:
    runs-on: ubuntu-latest
    needs: [integration_test]

    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4

      - name: Docker にログイン
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Docker Buildx をセットアップ
        uses: docker/setup-buildx-action@v3

      - name: Docker イメージをビルド & プッシュ
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nicodb-django:latest
            ${{ secrets.DOCKER_USERNAME }}/nicodb-django:${{ github.sha }}

      - name: サーバーにデプロイ
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/nicodb-django:latest
            docker compose -f ${{ secrets.DOCKER_COMPOSE_FILE }} down
            docker image prune -af
            docker compose -f ${{ secrets.DOCKER_COMPOSE_FILE }} up -d

  notify:
    runs-on: ubuntu-latest
    needs: [lint, unit_test, integration_test, deploy]
    if: failure()

    steps:
      - name: Slack に通知
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Workflow Failed
          SLACK_COLOR: danger
          SLACK_MESSAGE: GitHub Actions ワークフローが失敗しました。詳細を確認してください。
